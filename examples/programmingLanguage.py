from ..generators import *
from .general import footer, header
from .util import *
from .general.namesNotationsDenotedBy import namesNotationsDenotedBy

properties = TableFields([
    "Creator", # Name of the person/people associated with the language creation, or the company behind it
    "Storage management", # Garbage collected, explicitly freed, lifespan
    "Maintener", # Who is currently in charge of managing the evolution
    "Extension of code file", # Extension of file containing the code
    "Extension of header file", # Extension of files used for compilation indication, not containing actual code usually
    "Package manager", # Standard tool to use to install library and share them
    "Successor of", # language(s) that insipired this one
    "Interpreter", # Name of standard interpreter
    "Compiler", # Name of standard compiler
    "Test system", # Name of standard test tool
    "Quality checker", # Name of standard tool to check code quality
    "Exception", # whether it support throwing and catching exceptino
    "String encoding", # utf8, ascii..
    "Object-oriented", # Whether it's object oriented
    "Functional", # Whether functions are first class citizen
    "Block creation", # indentation, curly braces
    "Structured", # Whether it admits structured programming paradigm
    "Design by contract", #
    "Logic programming", #
    "Official document", # where are the documentation published
    "Lazyness", # Whether values are computed immediately or when needed
    "Tail call optimization", # Whether ending a function by returning a value still uses more stack
    "first-class continuation", # Whether continuations are first-class objects
    "Value typing", # Whether values have a type at runtime
    "Varialbe typing", # Whether variables have a type
    "Decorator", # Whether there is a notion of decorator
    "Eval", # Whether it is possible to evaluate arbitrary code inside the program
    "Lamdba", # Whether there is lambda expression/anonymous functions
    "Class", # Whether there are classes
    "Metaprogramming", #
    "Reflection", # Whether it admits reflection,
    "Integral arithmetic", # fixed number of bit or arbitrary precision?
    "Floating arithmetic", # Whether it's arbitrary precision, rational, or native precision
    "Goal", # speed, safety, fun, teaching
    "Documentation", #Â Tools to generate documentaiton
    "In stack", # Whether everything can be in stack, or only scalar
    "Inheritance", # Simple, multiple, none, (only if class)
    "Polymorphism", # How can container adapt to various types
    "Compiled file extension", # extension of file generated by compiler
    "Launching", # What is executed at launch. Main, all code
    
    

    "Pointer access", # 
    "Assignation by", # 
    "Imperative", # Whether by default variables are mutable
    "Logic",
    "Declarative",
    "Event",
    "Concurrential",
    "Strong/weak typing",
    "Static/dynamic type",
    "Purity",
    "Strict",
    "Lazy",
    "Eager",
    "Synchrone",
    "Asynchrone",
    "Parallel",
    "Distributed",
    "Scheduled",
    "Level",
    "Domain",
])

programmingLanguage = addBoilerplate([
    namesNotationsDenotedBy,
    properties])
